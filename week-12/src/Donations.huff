/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

#define macro DONATED() = takes(0) returns(0) {
    0x20 0x00 mstore
    0x40 0x20 mstore
    address 0x40 mstore
    [balances] 0x60 mstore
    0x80 0x00 sha3
    sload
    0x00 mstore
    0x20 0x00 return
}

#define constant balances = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr

    __FUNC_SIG(donated)       eq donated jumpi

    0x20 0x00 mstore
    0x40 0x20 mstore
    address 0x40 mstore
    [balances] 0x60 mstore
    0x80 0x00 sha3          // [sender slot]
    dup1 sload              // [slot value, sender slot]
    callvalue               // [callvalue, slot value, sender slot]
    add                     // [slot value + callvalue, sender slot]
    swap1                   // [sender slot, slot value + callvalue]
    sstore                  // []
    0x00 0x00 return

    donated:
        DONATED()
}